--- training_main	2018-09-18 06:31:38.000000000 -0700
+++ contest_main	2018-09-18 06:31:52.000000000 -0700
@@ -1,7 +1,7 @@
 if __name__ == "__main__":
  
     import tmparms
-
+    
     
     # Handle parameters
     parms = tmparms.tmparms()
@@ -9,36 +9,49 @@ if __name__ == "__main__":
     parms.add_argument('--verbose', '-v', action='count')
     parms.add_argument('--configfile', type=str, default='wp-config.php')
     parms.add_argument('--uselocal', action='store_true')
-    parms.add_argument('--outfile', type=str, default='trainingschedule.html')
+    parms.add_argument('--outfile', type=str, default='contestschedule.html')
+    parms.add_argument('--season', type=str, choices=['fall', 'spring', 'Fall', 'Spring', ''], default='')
+    parms.add_argument('--year', type=int, default=0)
     parms.add_argument('--showpastregistration', dest='showpast', action='store_true')
-    # Add other parameters here
-    globals.setup(parms, connect=False)
+    
+    # Do global setup
+    globals.setup(parms)
+    conn = globals.conn
+    curs = globals.curs
+   
 
- 
       
-    # Figure out the training period.
+    # Figure out the contest period.
     parms.now = datetime.now()   
     parms.start = parms.now
     parms.end = parms.now  
-    if parms.now.month >= 5 and parms.now.month <= 9:
-        parms.start = parms.start.replace(month=6,day=1)
-        parms.end = parms.end.replace(month=9,day=30)
+    if parms.now.month <= 6 or parms.season.lower() == 'spring':
+        parms.start = parms.start.replace(month=1,day=1)
+        parms.end = parms.end.replace(month=6,day=30)
     else:
-        parms.start = parms.start.replace(month=11,day=1)
-        parms.end = parms.end.replace(month=3,day=31)
-        if parms.now.month >= 10:
-            parms.end = parms.end.replace(year=parms.end.year+1)
-        else:
-            parms.start = parms.start.replace(year=parms.start.year-1)
-    # But we don't care about past trainings, set start to today
-    parms.start = parms.now.replace(hour=0,minute=0,second=0)
+        parms.start = parms.start.replace(month=7,day=1)
+        parms.end = parms.end.replace(month=12,day=31)
+    if parms.year:
+        parms.start = parms.start.replace(year=parms.year)
+        parms.end = parms.end.replace(year=parms.year)
+        
     
+    # We need a complete list of Areas and Divisions
+    divisions = {}
+    curs.execute("SELECT district, division, area FROM areaperf WHERE entrytype='L' GROUP BY district, division, area")
+    for (district, division, area) in curs.fetchall():
+        if division != '0D':
+            if division not in divisions:
+                divisions[division] = Division(division)
+            divisions[division].addArea(area)
+    conn.close()
 
     # Parse the configuration file
     config = tmutil.parseWPConfig(open(parms.configfile,'r'))
     if parms.uselocal:
         config['DB_HOST'] = 'localhost'
 
+
     # Connect to the WP database     
     conn = dbconn.dbconn(config['DB_HOST'], config['DB_USER'], config['DB_PASSWORD'], config['DB_NAME'])
     curs = conn.cursor()
@@ -46,23 +59,23 @@ if __name__ == "__main__":
     poststable = prefix + 'posts'
     optionstable = prefix + 'options'
     
-    # Find the taxonomy value for 'training'
-    stmt = "SELECT term_id FROM %s WHERE slug = 'training'" % (prefix+'terms')
+    # Find the taxonomy value for 'contest'
+    stmt = "SELECT term_id FROM %s WHERE slug = 'contest'" % (prefix+'terms')
     curs.execute(stmt)
-    tax_training = curs.fetchone()[0]
+    tax_contest = curs.fetchone()[0]
+    
     
-    # Find all published training events in the database
+    # Find all published contest events in the database
     
-    stmt = "SELECT ID, post_title, post_name from %s p INNER JOIN %s t ON p.ID = t.object_id WHERE p.post_type = 'tribe_events' AND p.post_status = 'publish' AND t.term_taxonomy_id = %%s" % (poststable, prefix+'term_relationships')
-    curs.execute(stmt, (tax_training,))
+    stmt = "SELECT ID, post_title from %s p INNER JOIN %s t ON p.ID = t.object_id WHERE p.post_type = 'tribe_events' AND p.post_status = 'publish' AND t.term_taxonomy_id = %%s" % (poststable, prefix+'term_relationships')
+    curs.execute(stmt, (tax_contest,))
     post_numbers = []
     post_titles = {}
-    post_names = {}
-    for (number, title, name) in curs.fetchall():
+    for (number, title) in curs.fetchall():
         post_numbers.append(number)
         post_titles[number] = title
-        post_names[number] = name
     nums = ','.join(['%d' % p for p in post_numbers])
+    title_pattern = re.compile(r"""(Division|Area)\s+(.*)\s+Contest""")
     
     
             
@@ -82,22 +95,56 @@ if __name__ == "__main__":
         venues[id]['VenueName'] = title
     
     
-    events = []
+    events = {}
     for p in list(posts.values()):
         id = p['post_id']
-        this = Event(post_titles[id], post_names[id], p, venues, parms)
-        if this.include:
-            events.append(this)
+        m = re.match(title_pattern, post_titles[id])
+        if m:
+            for area in m.group(2).replace('/',' ').split():
+                this = Event(p, area, venues, parms)
+                if this.include:
+                    events[area] = this
+                    if not events[area].EventURL:
+                        print('Area %s does not have a URL' % area)
+            
+        else:
+            print(p['post_id'], 'does not have an Area')
+            continue
             
 
     outfile = open(parms.outfile,'w')
-    outfile.write("""<table class="d101eventtable"><colgroup> <col> <col> <col> </colgroup>
+    outfile.write("""<table border="1"><colgroup> <col> <col> <col> </colgroup>
 <thead>
-<tr><th><b>Training</b></th><th><b>When</b></th><th><b>Where</b></th></tr>
+
 </thead>
 <tbody>\n""")
-    for event in sorted(events,key=lambda l:l.start):
-        output(event, outfile)
+    outfile.write("<style>td.divhead {background: #F2DF74; font-size: 200%; font-weight: bold; text-align: center; border: none;}</style>\n")
+    for div in sorted(divisions.keys()):
+        d = divisions[div]
+        outfile.write('<tr><td colspan="3" class="divhead">Division %s</td></tr>\n' % div)
+        outfile.write('<tr><td><b>Area/Division</b></td><td><b>When</b></td><td><b>Where</b></td></tr>\n')
+        if div in events:
+            output(events[div], outfile)
+        else:
+            output(tocome('<b>Division %s</b>' % div), outfile)
+        pending = None
+        for a in d.arealist():
+            if a in events:
+                if pending:
+                    if pending.EventURL == events[a].EventURL:
+                        pending.area += '/' + a
+                    else:
+                        output(pending, outfile)
+                        pending = events[a]
+                else:
+                    pending = events[a]
+            else:
+                if pending:
+                    output(pending, outfile)
+                    pending = None
+                output(tocome('Area %s' % a), outfile)
+        if pending:
+            output(pending, outfile)
     
     outfile.write("""</tbody>
     </table>\n""")
